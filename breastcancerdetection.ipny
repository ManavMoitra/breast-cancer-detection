{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_breast_cancer\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "cancer=load_breast_cancer()\n",
    "df=pd.DataFrame(cancer.data,columns=cancer.feature_names)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Melignant or Beningn']=pd.Categorical.from_codes(cancer.target,cancer.feature_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=df[\"Melignant or Beningn\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=pd.factorize(df[\"Melignant or Beningn\"])[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Melignant or Beningn\"]=y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "      <th>Melignant or Beningn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.30010</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.08690</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.19740</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.24140</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.19800</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12.45</td>\n",
       "      <td>15.70</td>\n",
       "      <td>82.57</td>\n",
       "      <td>477.1</td>\n",
       "      <td>0.12780</td>\n",
       "      <td>0.17000</td>\n",
       "      <td>0.15780</td>\n",
       "      <td>0.08089</td>\n",
       "      <td>0.2087</td>\n",
       "      <td>0.07613</td>\n",
       "      <td>...</td>\n",
       "      <td>23.75</td>\n",
       "      <td>103.40</td>\n",
       "      <td>741.6</td>\n",
       "      <td>0.1791</td>\n",
       "      <td>0.5249</td>\n",
       "      <td>0.5355</td>\n",
       "      <td>0.1741</td>\n",
       "      <td>0.3985</td>\n",
       "      <td>0.12440</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>18.25</td>\n",
       "      <td>19.98</td>\n",
       "      <td>119.60</td>\n",
       "      <td>1040.0</td>\n",
       "      <td>0.09463</td>\n",
       "      <td>0.10900</td>\n",
       "      <td>0.11270</td>\n",
       "      <td>0.07400</td>\n",
       "      <td>0.1794</td>\n",
       "      <td>0.05742</td>\n",
       "      <td>...</td>\n",
       "      <td>27.66</td>\n",
       "      <td>153.20</td>\n",
       "      <td>1606.0</td>\n",
       "      <td>0.1442</td>\n",
       "      <td>0.2576</td>\n",
       "      <td>0.3784</td>\n",
       "      <td>0.1932</td>\n",
       "      <td>0.3063</td>\n",
       "      <td>0.08368</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>13.71</td>\n",
       "      <td>20.83</td>\n",
       "      <td>90.20</td>\n",
       "      <td>577.9</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>0.16450</td>\n",
       "      <td>0.09366</td>\n",
       "      <td>0.05985</td>\n",
       "      <td>0.2196</td>\n",
       "      <td>0.07451</td>\n",
       "      <td>...</td>\n",
       "      <td>28.14</td>\n",
       "      <td>110.60</td>\n",
       "      <td>897.0</td>\n",
       "      <td>0.1654</td>\n",
       "      <td>0.3682</td>\n",
       "      <td>0.2678</td>\n",
       "      <td>0.1556</td>\n",
       "      <td>0.3196</td>\n",
       "      <td>0.11510</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>13.00</td>\n",
       "      <td>21.82</td>\n",
       "      <td>87.50</td>\n",
       "      <td>519.8</td>\n",
       "      <td>0.12730</td>\n",
       "      <td>0.19320</td>\n",
       "      <td>0.18590</td>\n",
       "      <td>0.09353</td>\n",
       "      <td>0.2350</td>\n",
       "      <td>0.07389</td>\n",
       "      <td>...</td>\n",
       "      <td>30.73</td>\n",
       "      <td>106.20</td>\n",
       "      <td>739.3</td>\n",
       "      <td>0.1703</td>\n",
       "      <td>0.5401</td>\n",
       "      <td>0.5390</td>\n",
       "      <td>0.2060</td>\n",
       "      <td>0.4378</td>\n",
       "      <td>0.10720</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>12.46</td>\n",
       "      <td>24.04</td>\n",
       "      <td>83.97</td>\n",
       "      <td>475.9</td>\n",
       "      <td>0.11860</td>\n",
       "      <td>0.23960</td>\n",
       "      <td>0.22730</td>\n",
       "      <td>0.08543</td>\n",
       "      <td>0.2030</td>\n",
       "      <td>0.08243</td>\n",
       "      <td>...</td>\n",
       "      <td>40.68</td>\n",
       "      <td>97.65</td>\n",
       "      <td>711.4</td>\n",
       "      <td>0.1853</td>\n",
       "      <td>1.0580</td>\n",
       "      <td>1.1050</td>\n",
       "      <td>0.2210</td>\n",
       "      <td>0.4366</td>\n",
       "      <td>0.20750</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
       "0        17.99         10.38          122.80     1001.0          0.11840   \n",
       "1        20.57         17.77          132.90     1326.0          0.08474   \n",
       "2        19.69         21.25          130.00     1203.0          0.10960   \n",
       "3        11.42         20.38           77.58      386.1          0.14250   \n",
       "4        20.29         14.34          135.10     1297.0          0.10030   \n",
       "5        12.45         15.70           82.57      477.1          0.12780   \n",
       "6        18.25         19.98          119.60     1040.0          0.09463   \n",
       "7        13.71         20.83           90.20      577.9          0.11890   \n",
       "8        13.00         21.82           87.50      519.8          0.12730   \n",
       "9        12.46         24.04           83.97      475.9          0.11860   \n",
       "\n",
       "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
       "0           0.27760         0.30010              0.14710         0.2419   \n",
       "1           0.07864         0.08690              0.07017         0.1812   \n",
       "2           0.15990         0.19740              0.12790         0.2069   \n",
       "3           0.28390         0.24140              0.10520         0.2597   \n",
       "4           0.13280         0.19800              0.10430         0.1809   \n",
       "5           0.17000         0.15780              0.08089         0.2087   \n",
       "6           0.10900         0.11270              0.07400         0.1794   \n",
       "7           0.16450         0.09366              0.05985         0.2196   \n",
       "8           0.19320         0.18590              0.09353         0.2350   \n",
       "9           0.23960         0.22730              0.08543         0.2030   \n",
       "\n",
       "   mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n",
       "0                 0.07871  ...          17.33           184.60      2019.0   \n",
       "1                 0.05667  ...          23.41           158.80      1956.0   \n",
       "2                 0.05999  ...          25.53           152.50      1709.0   \n",
       "3                 0.09744  ...          26.50            98.87       567.7   \n",
       "4                 0.05883  ...          16.67           152.20      1575.0   \n",
       "5                 0.07613  ...          23.75           103.40       741.6   \n",
       "6                 0.05742  ...          27.66           153.20      1606.0   \n",
       "7                 0.07451  ...          28.14           110.60       897.0   \n",
       "8                 0.07389  ...          30.73           106.20       739.3   \n",
       "9                 0.08243  ...          40.68            97.65       711.4   \n",
       "\n",
       "   worst smoothness  worst compactness  worst concavity  worst concave points  \\\n",
       "0            0.1622             0.6656           0.7119                0.2654   \n",
       "1            0.1238             0.1866           0.2416                0.1860   \n",
       "2            0.1444             0.4245           0.4504                0.2430   \n",
       "3            0.2098             0.8663           0.6869                0.2575   \n",
       "4            0.1374             0.2050           0.4000                0.1625   \n",
       "5            0.1791             0.5249           0.5355                0.1741   \n",
       "6            0.1442             0.2576           0.3784                0.1932   \n",
       "7            0.1654             0.3682           0.2678                0.1556   \n",
       "8            0.1703             0.5401           0.5390                0.2060   \n",
       "9            0.1853             1.0580           1.1050                0.2210   \n",
       "\n",
       "   worst symmetry  worst fractal dimension  Melignant or Beningn  \n",
       "0          0.4601                  0.11890                     0  \n",
       "1          0.2750                  0.08902                     0  \n",
       "2          0.3613                  0.08758                     0  \n",
       "3          0.6638                  0.17300                     0  \n",
       "4          0.2364                  0.07678                     0  \n",
       "5          0.3985                  0.12440                     0  \n",
       "6          0.3063                  0.08368                     0  \n",
       "7          0.3196                  0.11510                     0  \n",
       "8          0.4378                  0.10720                     0  \n",
       "9          0.4366                  0.20750                     0  \n",
       "\n",
       "[10 rows x 31 columns]"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=df.iloc[:,:-1].values\n",
    "y=df.iloc[:,30].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "sc_X=StandardScaler()\n",
    "X_train=sc_X.fit_transform(X_train)\n",
    "X_test=sc_X.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "pca=PCA(n_components=2)\n",
    "X_train=pca.fit_transform(X_train)\n",
    "X_test=pca.transform(X_test)\n",
    "explained_variance=pca.explained_variance_ratio_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=5,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=0, splitter='best')"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "classifier1=DecisionTreeClassifier(criterion=\"entropy\",max_depth=5,random_state=0)\n",
    "classifier1.fit(X_train,y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred1=classifier1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_train, y_train\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier1.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('decision tree (Training set)')\n",
    "plt.xlabel('pc1')\n",
    "plt.ylabel('pc2')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_test, y_test\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier1.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('decision tree (Test set)')\n",
    "plt.xlabel('pc1')\n",
    "plt.ylabel('pc2')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9181286549707602\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "print(accuracy_score(y_test,y_pred1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier2=GradientBoostingClassifier(n_estimators=32,learning_rate=0.08,max_depth=5,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier2.fit(X_train,y_train)\n",
    "y_pred2=classifier2.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9239766081871345\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test,y_pred2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_train, y_train\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier2.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('GradientBoostingClassifier(Training set)')\n",
    "plt.xlabel('pc1')\n",
    "plt.ylabel('pc2')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_test, y_test\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier2.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('GradientBoostingClassifier(Test set)')\n",
    "plt.xlabel('pc1')\n",
    "plt.ylabel('pc2')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "classifier3=RandomForestClassifier(n_estimators=10,criterion='entropy',max_depth=8,random_state=0)\n",
    "classifier3.fit(X_train,y_train)\n",
    "y_pred3=classifier3.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9064327485380117\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test,y_pred3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_train, y_train\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier3.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('Random Forest(Training set)')\n",
    "plt.xlabel('pc1')\n",
    "plt.ylabel('pc2')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_test, y_test\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier3.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('Random Forest(Test set)')\n",
    "plt.xlabel('pc1')\n",
    "plt.ylabel('pc2')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import jaccard_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8571428571428571\n"
     ]
    }
   ],
   "source": [
    "print(jaccard_score(y_test,y_pred3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC\n",
    "classifier4=SVC(kernel=\"linear\",C=0.1,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC(C=0.1, cache_size=200, class_weight=None, coef0=0.0,\n",
       "    decision_function_shape='ovr', degree=3, gamma='auto_deprecated',\n",
       "    kernel='linear', max_iter=-1, probability=False, random_state=0,\n",
       "    shrinking=True, tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier4.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred4=classifier4.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9181286549707602\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test,y_pred4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\KIIT\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:813: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "parameters=[{'C' : [0.1,1,2,3,50,10,100], 'kernel': ['linear']},\n",
    "            {'C' : [0.1,1,2,3,50,10,100], 'kernel': ['rbf'], 'gamma' : [0.1,0.2,0.3,0.4,0.5,0.6]}]\n",
    "grid_search=GridSearchCV(estimator=classifier4,\n",
    "                         param_grid=parameters,\n",
    "                         scoring='accuracy',\n",
    "                         cv=10,\n",
    "                         n_jobs=-1)\n",
    "grid_search=grid_search.fit(X_train,y_train)\n",
    "best_score=grid_search.best_score_\n",
    "best_parameters=grid_search.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'C': 0.1, 'kernel': 'linear'}\n"
     ]
    }
   ],
   "source": [
    "print(best_parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_train, y_train\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier4.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('svm(Training set)')\n",
    "plt.xlabel('pc1')\n",
    "plt.ylabel('pc2')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n",
      "'c' argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with 'x' & 'y'.  Please use a 2-D array with a single row if you really want to specify the same RGB or RGBA value for all points.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib.colors import ListedColormap\n",
    "X_set, y_set = X_test, y_test\n",
    "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n",
    "                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\n",
    "plt.contourf(X1, X2, classifier4.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n",
    "             alpha = 0.75, cmap = ListedColormap(('red', 'green')))\n",
    "plt.xlim(X1.min(), X1.max())\n",
    "plt.ylim(X2.min(), X2.max())\n",
    "for i, j in enumerate(np.unique(y_set)):\n",
    "    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n",
    "                c = ListedColormap(('red', 'green'))(i), label = j)\n",
    "plt.title('SVM (Test set)')\n",
    "plt.xlabel('pc1')\n",
    "plt.ylabel('pc2')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 57   6]\n",
      " [  8 100]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "cm=confusion_matrix(y_test,y_pred4)\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier5=KNeighborsClassifier(n_neighbors=5,metric='minkowski')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                     weights='uniform')"
      ]
     },
     "execution_count": 322,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier5.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred6=classifier5.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9181286549707602\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test,y_pred6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
